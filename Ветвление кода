C++ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –º–Ω–æ–≥–æ —É—Ä–æ–≤–Ω–µ–π –≤–µ—Ç–≤–ª–µ–Ω–∏—è:

üîπ –ù–∞ —É—Ä–æ–≤–Ω–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è (if, switch, ?:)

üî∏ –ù–∞ —É—Ä–æ–≤–Ω–µ —Ç–∏–ø–æ–≤ (template, if constexpr, concepts)

üîß –ù–∞ —É—Ä–æ–≤–Ω–µ –º–µ—Ç–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è (enable_if, variant)

üß© –ß–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (std::function, visitor, strategy pattern)

1. if / else if / else ‚Äî —Å–∞–º—ã–π –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Å–ø–æ—Å–æ–±
cpp
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
int x = 10;
if (x > 0) {
    std::cout << "–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ\n";
} else if (x < 0) {
    std::cout << "–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ\n";
} else {
    std::cout << "–ù–æ–ª—å\n";
}
–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤–µ—Ç–≤–∏—Ç—å –ø–æ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º

–£—Å–ª–æ–≤–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω—ã–º–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã (&&, ||, !)

üîπ 2. switch ‚Äî –≤—ã–±–æ—Ä –ø–æ –∑–Ω–∞—á–µ–Ω–∏—è–º (–æ–±—ã—á–Ω–æ int, char, enum)
cpp
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
int code = 2;
switch (code) {
    case 1: std::cout << "–û–¥–∏–Ω\n"; break;
    case 2: std::cout << "–î–≤–∞\n"; break;
    case 3: std::cout << "–¢—Ä–∏\n"; break;
    default: std::cout << "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ\n";
}
–ë—ã—Å—Ç—Ä–µ–µ if –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É—á–∞—è—Ö (–º–æ–∂–µ—Ç –∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ jump table)

–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å float, double, std::string –∏ —Ç.–ø.

–ë–µ–∑ break ‚Äî –ø—Ä–æ–≤–∞–ª–∏–≤–∞–µ—Ç—Å—è –≤–Ω–∏–∑ –ø–æ –∫–µ–π—Å–∞–º (fallthrough)

üîπ 3. –¢–µ—Ä–Ω–∞—Ä–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä ?: ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π if-else
cpp
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
int a = 5, b = 10;
int max = (a > b) ? a : b;
–£–¥–æ–±–µ–Ω –¥–ª—è –≤—ã—Ä–∞–∂–µ–Ω–∏–π, –æ—Å–æ–±–µ–Ω–Ω–æ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

–õ—É—á—à–µ –Ω–µ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª—è—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ —Ç–µ—Ä–Ω–∞—Ä–Ω–∏–∫–∞–º–∏ ‚Äî –ø–ª–æ—Ö–æ —á–∏—Ç–∞–µ—Ç—Å—è

üîπ 4. std::variant + std::visit (—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –≤–µ—Ç–≤–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø—É)
cpp
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
std::variant<int, std::string> val = "Hello";
std::visit([](auto&& arg) {
    std::cout << arg << "\n";
}, val);
–≠—Ç–æ —Å–ø–æ—Å–æ–± —Å–¥–µ–ª–∞—Ç—å —Ç–∏–ø–æ–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–µ—Ç–≤–ª–µ–Ω–∏–µ (type-based dispatch)

–û—á–µ–Ω—å —É–¥–æ–±–Ω–æ –≤ —à–∞–±–ª–æ–Ω–∞—Ö –∏ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ std::variant

üîπ 5. if constexpr (C++17) ‚Äî –∫–æ–º–ø–∏–ª—è—Ü–∏–æ–Ω–Ω–æ–µ –≤–µ—Ç–≤–ª–µ–Ω–∏–µ
cpp
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
template<typename T>
void print_type(T x) {
    if constexpr (std::is_integral_v<T>)
        std::cout << "–¶–µ–ª–æ–µ\n";
    else
        std::cout << "–ù–µ —Ü–µ–ª–æ–µ\n";
}
–£—Å–ª–æ–≤–∏–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –Ω–∞ —ç—Ç–∞–ø–µ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏

–ù–µ–Ω—É–∂–Ω—ã–µ –≤–µ—Ç–∫–∏ –≤–æ–æ–±—â–µ –Ω–µ –∫–æ–º–ø–∏–ª–∏—Ä—É—é—Ç—Å—è ‚Üí –Ω–µ—Ç –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∏—Ö –∫–æ–¥–µ

üîπ 6. –£—Å–ª–æ–≤–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –≤ for, while, do-while
–≠—Ç–∏ —Ü–∏–∫–ª—ã —Ç–æ–∂–µ –º–æ–∂–Ω–æ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∫–∞–∫ –≤–µ—Ç–≤–ª–µ–Ω–∏–µ —Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ–º, –∑–∞–≤–∏—Å—è—â–µ–µ –æ—Ç —É—Å–ª–æ–≤–∏—è:

cpp
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
while (x > 0) {
    // –ø–æ–∫–∞ x –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ–º
}
üîπ 7. goto (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è, –Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
cpp
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
if (x == 0)
    goto skip;

std::cout << "x ‚â† 0";

skip:
std::cout << "–ü—Ä–æ–ø—É—â–µ–Ω–æ\n";
–£–ø—Ä–æ—â–∞–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤, –Ω–æ –ø–æ—Ä—Ç–∏—Ç —á–∏—Ç–∞–µ–º–æ—Å—Ç—å

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–¥–∫–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø–∞—Ä—Å–µ—Ä–∞–º–∏ –∏–ª–∏ –≤ —Å—Ç–∞—Ä–æ–º –∫–æ–¥–µ)

üîπ 8. –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–û–ü–ü-—Å—Ç–∏–ª—å –≤–µ—Ç–≤–ª–µ–Ω–∏—è)
cpp
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
class Shape {
public:
    virtual void draw() = 0;
};

class Circle : public Shape {
    void draw() override { std::cout << "–ö—Ä—É–≥\n"; }
};

Shape* s = new Circle;
s->draw(); // –≤—ã–∑–æ–≤ –Ω—É–∂–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ —Ä–∞–Ω—Ç–∞–π–º–µ
–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤–µ—Ç–≤–∏—Ç—å –ø–æ —Ç–∏–ø—É –æ–±—ä–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º

–û—á–µ–Ω—å —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –ø—Ä–æ–≥—Ä–∞–º–º

 9. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–µ—Ç–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ std::function, std::map –∏ —É–∫–∞–∑–∞—Ç–µ–ª–∏ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏
–ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤–µ—Ç–≤–ª–µ–Ω–∏–µ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é, –Ω–æ –≤–º–µ—Å—Ç–æ switch –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ:

cpp
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
std::map<int, std::function<void()>> actions = {
    {1, []{ std::cout << "–û–¥–∏–Ω\n"; }},
    {2, []{ std::cout << "–î–≤–∞\n"; }},
};

int input = 2;
actions[input](); // –≤—ã–∑–æ–≤–µ—Ç –Ω—É–∂–Ω—É—é –ª—è–º–±–¥—É
üëâ –≠—Ç–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ switch, –æ—Å–æ–±–µ–Ω–Ω–æ –∫–æ–≥–¥–∞ —Ö–æ—á–µ—Ç—Å—è —Ä–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥ –∏–ª–∏ —Å–æ–±—ã—Ç–∏–π).

üîπ 10. –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —á–µ—Ä–µ–∑ —à–∞–±–ª–æ–Ω—ã –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é (compile-time dispatch)
cpp
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
template<typename T>
void process(T val) {
    std::cout << "–û–±—â–∏–π —Å–ª—É—á–∞–π\n";
}

template<>
void process<int>(int val) {
    std::cout << "int\n";
}
üëâ –≠—Ç–æ –≤–µ—Ç–≤–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø—É –Ω–∞ —ç—Ç–∞–ø–µ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏, —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —à–∞–±–ª–æ–Ω–æ–≤.

üîπ 11. SFINAE / std::enable_if ‚Äî —É—Å–ª–æ–≤–Ω–∞—è –∫–æ–º–ø–∏–ª—è—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–æ–≤
cpp
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
template<typename T>
std::enable_if_t<std::is_integral_v<T>, void>
foo(T x) {
    std::cout << "–¶–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π —Ç–∏–ø\n";
}
üëâ –≠—Ç–æ —Ç–æ–∂–µ –≤–µ—Ç–≤–ª–µ–Ω–∏–µ, –Ω–æ –Ω–∞ —É—Ä–æ–≤–Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞. –ü–æ–ª–µ–∑–Ω–æ –≤ –æ–±–æ–±—â—ë–Ω–Ω–æ–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏.

üîπ 12. Pattern matching (–±—É–¥–µ—Ç –≤ C++26)
cpp
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
auto result = match(x) {
    case 1: return "–æ–¥–∏–Ω";
    case 2: return "–¥–≤–∞";
    case _: return "–¥—Ä—É–≥–æ–µ";
};
üîß –ü–æ–∫–∞ –≤ –±—É–¥—É—â–µ–º ‚Äî –Ω–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ switch, —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —É—Å–ª–æ–≤–∏–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è.

üîπ 13. –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å —à–∞–±–ª–æ–Ω–∞–º–∏ (concepts) ‚Äî C++20+
cpp
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
template<typename T>
concept Printable = requires(T x) {
    std::cout << x;
};

template<Printable T>
void print(T x) {
    std::cout << x << "\n";
}
üëâ –≠—Ç–æ –≤–µ—Ç–≤–ª–µ–Ω–∏–µ –ø–æ –∫–æ–Ω—Ü–µ–ø—Ç—É ‚Äî –µ—Å–ª–∏ —Ç–∏–ø –ø–æ–¥—Ö–æ–¥–∏—Ç, —Ñ—É–Ω–∫—Ü–∏—è –µ—Å—Ç—å, –∏–Ω–∞—á–µ ‚Äî –æ—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏.

üîπ 14. –ö–æ–º–ø–æ–∑–∏—Ü–∏—è —á–µ—Ä–µ–∑ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ (behavior injection)
cpp
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
struct StrategyA {
    void operator()() const { std::cout << "A\n"; }
};

template<typename Strategy>
struct Context {
    void run() { Strategy{}(); }
};

Context<StrategyA> c;
c.run(); // "A"
üëâ –í–µ—Ç–≤–ª–µ–Ω–∏–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è –Ω–∞ —ç—Ç–∞–ø–µ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ —á–µ—Ä–µ–∑ —Ç–∏–ø—ã.

üîπ 15. Exception handling (–Ω–µ–º–Ω–æ–≥–æ –≤–µ—Ç–≤–ª–µ–Ω–∏–µ —Ç–æ–∂–µ)
cpp
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
try {
    doSomething();
} catch (const std::runtime_error& e) {
    std::cout << "Runtime error\n";
} catch (...) {
    std::cout << "–ß—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ\n";
}
üëâ –≠—Ç–æ –≤–µ—Ç–≤–ª–µ–Ω–∏–µ –ø–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º ‚Äî —Ç–æ–∂–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –ø–æ—Ç–æ–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è.

üîπ 16. –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (if —á–µ—Ä–µ–∑ —Ä–µ–∫—É—Ä—Å–∏—é)
–ò–Ω–æ–≥–¥–∞ –≤–º–µ—Å—Ç–æ –≤–µ—Ç–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ä–µ–∫—É—Ä—Å–∏—é –∫–∞–∫ –∑–∞–º–µ–Ω—É if, –æ—Å–æ–±–µ–Ω–Ω–æ –≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ:

cpp
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
void factorial(int n, int acc = 1) {
    if (n == 0) {
        std::cout << acc;
        return;
    }
    factorial(n - 1, acc * n);
}
